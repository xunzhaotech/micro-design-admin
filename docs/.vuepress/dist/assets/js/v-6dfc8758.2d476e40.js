"use strict";(self.webpackChunkmicro_design_admin=self.webpackChunkmicro_design_admin||[]).push([[772],{7751:function(e,o,t){t.r(o),t.d(o,{data:function(){return p}});const p={key:"v-6dfc8758",path:"/pages/standard/ANDROID.html",title:"Android 规范",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"命名规范",slug:"命名规范",children:[]},{level:2,title:"目录规范",slug:"目录规范",children:[]},{level:2,title:"编码规范",slug:"编码规范",children:[]}],filePathRelative:"pages/standard/ANDROID.md",git:{updatedTime:1637570873e3,contributors:[{name:"luyb",email:"luyb@xunzhaotech.com",commits:1}]}}},7531:function(e,o,t){t.r(o),t.d(o,{default:function(){return l}});const p=(0,t(6252).uE)('<h1 id="android-规范" tabindex="-1"><a class="header-anchor" href="#android-规范">#</a> Android 规范</h1><h2 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范">#</a> 命名规范</h2><blockquote><p>项目applicationId命名</p></blockquote><p>采用单词，字母全部小写，或者单词加“-”，结构（com.ak.项目名单词）</p><p>如：com.ak.health com.ak.library-base</p><blockquote><p>函数命名</p></blockquote><p>采用单词驼峰规则名字，使函数名尽量可以推测其用途属性具有描述性</p><p>如： public void getListHistory( ) { }</p><blockquote><p>变量命名</p></blockquote><p>采用首字母小写单词驼峰规则名字，使变量名尽量可以推测其用途属性具有描述性</p><p>如：private int msgCount=1;</p><p>定义布尔值使用小写 boolean</p><p>如：private boolean isShowTitle=true;</p><blockquote><p>图片资源文件命名</p></blockquote><p>图片资源命名方式，以功能为组织形式，有利于查看资源文件。</p><blockquote><p>图片命名原则：</p></blockquote><ol><li><p>采用单词全拼，或者大家公认无岐义的缩写（比如：<code>icon</code>，<code>bg</code>，<code>btn</code>等）</p></li><li><p>采用下划线进行连接</p></li><li><p>采用 “模块+功能” 命名法，模块分为公共模块、私有模块。公共模块主要包括统一的背</p></li><li><p>景，导航条，标签，公共的按钮背景，公共的默认图等等；私有模块主要根据 <code>APP</code> 的业务</p></li><li><p>功能模块划分，比如用户中心，消息中心等</p></li><li><p>背景图采用以 <code>bg</code> 作为前缀</p></li><li><p>普通状态的图片以 <code>normal</code> 作为后缀，高亮状态的图片以 <code>selected</code> 作为后缀</p></li></ol><blockquote><p>图片命名示例：</p></blockquote><p>图标图片命名：icon_me_share.png</p><p>背景图片命名：bg_me_title.png</p><p>按钮图片命名：</p><p>btn_me_back.png</p><p>btn_me_back_normal.png</p><p>btn_me_back_selected.png</p><h2 id="目录规范" tabindex="-1"><a class="header-anchor" href="#目录规范">#</a> 目录规范</h2><blockquote><p>整体结构</p></blockquote><p>项目采用mvvm架构，Retrofit+Okhttp+RxJava</p><p><img src="/doc/project_library.png" alt="Image text"></p><p><img src="/doc/project_tree.png" alt="Image text"></p><blockquote><p>子模块结构：</p></blockquote><p><img src="/doc/project_module.png" alt="Image text"></p><h2 id="编码规范" tabindex="-1"><a class="header-anchor" href="#编码规范">#</a> 编码规范</h2><blockquote><p>方法声明规范</p></blockquote><ol><li>使方法名尽量可以推测其用途属性具有描述性</li><li>前括号提至方法后</li><li>方法与方法之间需换行</li><li>代码写完后需要进行代码格式化 Ctrl+Alt+L 默认格式化代码</li></ol><p><img src="/doc/project_code.png" alt="Image text"></p><blockquote><p>注释说明</p></blockquote><p>1.每个class头部需要进行注释说明</p><p>2.每个变量后面需要进行备注说明</p><p>3.方法前面需要增加一个简单说明用途</p><p><img src="/doc/project_code_note.png" alt="Image text"></p>',40),c={};var l=(0,t(3744).Z)(c,[["render",function(e,o){return p}]])},3744:function(e,o){o.Z=(e,o)=>{const t=e.__vccOpts||e;for(const[e,p]of o)t[e]=p;return t}}}]);